{"version":3,"file":"releva-retargeting-DT8kkpNy.js","sources":["../../../app/administration/src/module/releva-retargeting/mixin/releva-notification.mixin.js","../../../app/administration/src/module/releva-retargeting/page/releva-retargeting-statistic/releva-retargeting-statistic.html.twig","../../../app/administration/src/module/releva-retargeting/page/releva-retargeting-statistic/index.js","../../../app/administration/src/module/releva-retargeting/component/releva-config-check-api-button/releva-config-check-api-button.html.twig","../../../app/administration/src/module/releva-retargeting/component/releva-config-check-api-button/index.js","../../../app/administration/src/module/releva-retargeting/extension/sw-system-config/sw-system-config.html.twig","../../../app/administration/src/module/releva-retargeting/extension/sw-system-config/index.js","../../../app/administration/src/module/releva-retargeting/service/retargeting-api-service/retargeting-api-service.js","../../../app/administration/src/module/releva-retargeting/service/retargeting-api-service/index.js","../../../app/administration/src/module/releva-retargeting/index.js"],"sourcesContent":["const { Mixin, Application } = Shopware;\nMixin.register('releva-notification', {\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n    methods: {\n        handleNotifications(notifications) {\n            var applicationRoot = Application.getApplicationRoot();\n            var title, message;\n            for (var i in notifications) {\n                var notificationKey = \"releva-retargeting.messages.\" + notifications[i].code;\n                if (applicationRoot.$t(notificationKey + \".title\") === notificationKey + \".title\") {\n                    title = applicationRoot.$t(\"releva-retargeting.messages.fallback.title\", {title: notifications[i].message});\n                    message = applicationRoot.$t(\"releva-retargeting.messages.fallback.message\", {code: notifications[i].code, data: JSON.stringify(notifications[i].data)});\n                } else {\n                    title = applicationRoot.$t(notificationKey + \".title\", notifications[i].data);\n                    message = applicationRoot.$t(notificationKey + \".message\", notifications[i].data);\n                }\n                this.createNotification({title: title, message: message, variant: notifications[i].variant});\n            }\n        },\n        handleAjaxErrors (data) {\n            if (data && data.errors) {\n                var applicationRoot = Application.getApplicationRoot();\n                data.errors.forEach((error) => {\n                    this.createNotification({title: applicationRoot.$t(\"releva-retargeting.messages.ajax.title\"), message: applicationRoot.$t(\"releva-retargeting.messages.ajax.message\", error), variant: \"error\"});\n                });\n            }\n        }\n    }\n});\n","{% block releva_retargeting_statistic %}\n    <sw-page class=\"releva-retargeting-statistic\">\n        <template #smart-bar-actions>\n            {% block releva_retargeting_statistic_actions %}\n                <sw-single-select\n                    v-if=\"salesChannelsToIframeUrl && salesChannelsToIframeUrl.length > 1\"\n                    class=\"releva-frame-releva-sales-channel-switch\"\n                    size=\"big\" \n                    labelProperty=\"salesChannel\"\n                    valueProperty=\"iframeUrl\"\n                    @update:value=\"onSalesChannelsToIframeUrlSelectionChange\"\n                    :value=\"currentIframeUrl\"\n                    :options=\"salesChannelsToIframeUrl\"\n                    :placeholder=\"$tc('releva-retargeting.config.relevaSalesChannelSwitch.label')\"\n                ></sw-single-select>\n            {% endblock %}\n        </template>\n        <template #content>\n            {% block releva_retargeting_statistic_content %}\n                <div v-if='currentIframeUrl' class=\"releva-frame-container\">\n                    <iframe :src=\"currentIframeUrl\" class=\"releva-frame-frame\"></iframe>\n                </div>\n            {% endblock %}\n        </template>\n    </sw-page>\n{% endblock %}\n","import template from './releva-retargeting-statistic.html.twig';\nimport './releva-retargeting-statistic.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('releva-retargeting-statistic', {\n    template,\n\n    inject: [\n        'retargetingApiService'\n    ],\n\n    mixins: [\n        Mixin.getByName('releva-notification')\n    ],\n    \n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    data() {\n        return {\n            currentIframeUrl: null,\n            salesChannelsToIframeUrl: null\n        };\n    },\n    \n    created() {\n        this.retargetingApiService.getInvolvedSalesChannelsToIframeUrls().then(\n            (response) => {\n                this.handleNotifications(response.notifications);\n                this.salesChannelsToIframeUrl = response.data;\n                this.onSalesChannelsToIframeUrlSelectionChange(this.salesChannelsToIframeUrl[0].iframeUrl);\n            }\n        ).catch(({ response: { data } }) => {\n            this.handleAjaxErrors(data);\n        });\n    },\n    \n    methods: {\n        onSalesChannelsToIframeUrlSelectionChange(iframeUrl) {\n            this.currentIframeUrl = iframeUrl;\n        }\n    }\n    \n});\n","{% block sw_text_field %}\n    {% block releva_config_check_api_button %}\n        <template v-if=\"salesChannel\">\n            <sw-contextual-field v-bind=\"$attrs\" :name=\"formFieldName\">\n                <template #sw-field-input=\"{identification, error, disabled, size, setFocusClass, removeFocusClass }\">\n                    <mt-text-field\n                        v-bind=\"$attrs\"\n                        :model-value=\"compatValue\"\n                        @update:modelValue=\"handleUpdateModelValue\"\n                    />\n                </template>\n                <template class=\"test\" #sw-contextual-field-suffix=\"{ disabled }\">\n                    <span @click=\"changeMode(disabled)\" class=\"releva-config-check-api-button-button\">\n                        <span v-if=\"buttonText\" class=\"releva-config-check-api-button-button-text\">\n                            <sw-icon v-if=\"buttonIcon\" class=\"releva-config-check-api-button-button-icon\" :color=\"buttonIcon.color\" :name=\"buttonIcon.name\" :small=\"true\"></sw-icon>\n                        </span>\n                    </span>\n                </template>\n            </sw-contextual-field>\n        </template>\n        <template v-else>\n            {{ scopeMessage }}\n        </template>\n    {% endblock %}\n{% endblock %}","import template from './releva-config-check-api-button.html.twig';\nimport './releva-config-check-api-button.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.extend('releva-config-check-api-button', 'sw-text-field', {\n    template,\n    \n    inheritAttrs: false,\n    \n    mixins: [\n        Mixin.getByName('releva-notification'),\n    ],\n    \n    inject: [\n        'retargetingApiService'\n    ],\n    \n    data() {\n        return {\n            checkApiState: \"unchecked\",\n            buttonText: function (self) {\n                var title = \"releva-retargeting\" + self.$attrs.name.substr(self.$attrs.name.indexOf('.')) + \".button\";\n                var translated = self.$tc(title);\n                return title === translated ? false : translated;\n            }(this),\n            salesChannel: function(self) {\n                var current = self;\n                while (typeof current.$parent !== \"undefined\") {\n                    current = current.$parent;\n                    if (typeof current.currentSalesChannelId !==\"undefined\") {\n                        return current.currentSalesChannelId;\n                    }\n                }\n                return '';\n            }(this),\n            scopeMessage: this.$attrs.scopeMessage,\n        };\n    },\n    computed: {\n        buttonIcon() {\n            if (typeof this.compatValue === \"undefined\") {\n                return;\n            }\n            // icons are in /vendor/shopware/administration/Resources/app/administration/node_modules/@shopware-ag/meteor-icon-kit/icons/regular/\n            switch (this.checkApiState) {\n                case \"success\": {\n                    return {name: \"regular-check-circle\", color: \"green\"};\n                }\n                case \"error\": {\n                    return {name: \"regular-exclamation-circle\", color: \"red\"};\n                }\n                case \"checking\": {\n                    return {name: \"regular-sync\", color: \"gray\"};\n                }\n                case \"unchecked\": {\n                    return {name: \"regular-cloud-upload\", color: \"silver\"};\n                }\n                default: {\n                    return {name: \"regular-ellipsis-h-s\", color: \"silver\"};\n                }\n            }\n        },\n        checkApiState() {\n            this.disabled() ? \"\" : \"unchecked\";\n        },\n        disabled() {\n            return typeof this.compatValue !== \"undefined\" && this.compatValue.trim() !== \"\"\n        }\n    },\n    methods: {\n        changeMode(disabled) {\n            if (disabled || (typeof this.compatValue !== \"undefined\" ? this.compatValue.trim() : \"\") === \"\") {\n                return;\n            }\n            this.checkApiState = \"checking\";\n            var self = this;\n            this.retargetingApiService.getVerifyApiKey({\n                apiKey: typeof this.compatValue !== \"undefined\" ? this.compatValue.trim() : \"\",\n                salesChannel: function(current) {\n                    while (typeof current.$parent !== \"undefined\") {\n                        current = current.$parent;\n                        if (typeof current.currentSalesChannelId !==\"undefined\") {\n                            return current.currentSalesChannelId;\n                        }\n                    }\n                    return '';\n                }(this)\n            }).then(\n                (response) => {\n                    self.checkApiState = response.data.userId === null ? \"error\" : \"success\";\n                    this.handleNotifications(response.notifications);\n                }\n            ).catch(({ response: { data } }) => {\n                self.checkApiState = \"unchecked\";\n                self.handleAjaxErrors(data);\n            });\n        }\n    }\n});\n","{% block sw_system_config_content_card_field %}\n    <template v-if=\"domain !== 'RelevaRetargeting.config'\">\n        {% parent() %}\n    </template>\n    <sw-inherit-wrapper\n        v-else-if=\"isNotDefaultSalesChannel || !element.config.hasOwnProperty('scope') || element.config.scope === 'global'\"\n        v-model:value=\"actualConfigData[currentSalesChannelId][element.name]\"\n        v-bind=\"getInheritWrapperBind(element)\"\n        :has-parent=\"isNotDefaultSalesChannel && (!element.config.hasOwnProperty('scope') || element.config.scope === 'global')\" {# not like parent #}\n        :inherited-value=\"getInheritedValue(element)\"\n        :class=\"'sw-system-config--field-' + kebabCase(getElementBind(element).name)\"\n    >\n        <template #content=\"props\">\n            <sw-form-field-renderer\n                v-bind=\"getElementBind(element, props)\"\n                :key=\"props.isInheritField + props.isInherited\"\n                :disabled=\"props.isInherited\"\n                :value=\"props.currentValue\"\n                :error=\"getFieldError(element.name)\"\n                @update:value=\"props.updateCurrentValue\"\n            />\n        </template>\n    </sw-inherit-wrapper>\n    <mt-banner\n        v-else-if=\"getScopeMessage(element) !== null\"\n        :title=\"getInlineSnippet(element.config.label)\"\n        variant=\"info\"\n    >\n        {{ getScopeMessage(element) }}\n    </mt-banner>\n{% endblock %}\n","import template from './sw-system-config.html.twig';\n\nconst { Component, Defaults, Mixin, State } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.override('sw-system-config', {\n    template,\n    inject: [\n        'retargetingApiService'\n    ],\n    mixins: [\n        Mixin.getByName('releva-notification')\n    ],\n    methods: {\n        getScopeMessage(element) {\n            var snippet = {};\n            var hasScopeMessage = false;\n            if (element.config.hasOwnProperty(\"scopeMessage\")) {\n                hasScopeMessage = true;\n                snippet['en-EN'] = element.config.scopeMessage;\n            }\n            if (element.config.hasOwnProperty(\"scopeMessageDE\")) {\n                hasScopeMessage = true;\n                snippet['de-DE'] = element.config.scopeMessageDE;\n            }\n            return hasScopeMessage ? this.getInlineSnippet(snippet) : null;\n        },\n        saveAll() {\n            this.isLoading = true;\n            if (this.domain === \"RelevaRetargeting.config\" && this.currentSalesChannelId) {\n                return this.retargetingApiService.getVerifyApiKey({\n                    apiKey: this.actualConfigData[this.currentSalesChannelId][\"RelevaRetargeting.config.relevanzApiKey\"],\n                    salesChannel: this.currentSalesChannelId,\n                    save: true// could be false\n                }).then(\n                    (response) => {\n                        if (this.actualConfigData.hasOwnProperty(this.currentSalesChannelId)) {\n                            this.actualConfigData[this.currentSalesChannelId][\"RelevaRetargeting.config.relevanzUserId\"] = response.data.userId;\n                        }\n                        this.handleNotifications(response.notifications);\n                        return this.$super(\"saveAll\");\n                    }\n                ).catch(({ response: { data } }) => {\n                    this.handleAjaxErrors(data);\n                    return this.$super(\"saveAll\");\n                }).finally(() => this.isLoading = false);\n            } else {\n                return this.$super(\"saveAll\");\n            }\n        }\n    }\n});\n","const {ApiService} = Shopware.Classes;\n\nclass RetargetingApiService extends ApiService \n{\n    constructor(httpClient, loginService, apiEndpoint = '/releva/retargeting') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n    \n    getInvolvedSalesChannelsToIframeUrls(config) {\n        const apiRoute = `${this.getApiBasePath()}/getInvolvedSalesChannelsToIframeUrls`\n        return this.httpClient.post(\n            apiRoute,\n            {\n                config: config\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    getVerifyApiKey(config) {\n        const apiRoute = `${this.getApiBasePath()}/getVerifyApiKey`\n        return this.httpClient.post(\n            apiRoute,\n            {\n                config: config\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n}\nexport default RetargetingApiService;\n","const { Application } = Shopware;\nimport RetargetingApiService from './retargeting-api-service.js';\n\nApplication.addServiceProvider('retargetingApiService', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new RetargetingApiService(initContainer.httpClient, container.loginService);\n});","import './mixin/';\nimport './page';\nimport './component';\nimport './extension';\nimport './service';\n\nimport {deDE, enGB} from './snippet';\n\nconst { Module } = Shopware;\n\nModule.register('releva-retargeting', {\n    \n    type: 'plugin',\n    name: 'relevanz-retargeting',\n    title: 'releva-retargeting.general.mainMenuItemGeneral',\n\n    favicon: '../../../../../relevaretargeting/administration/static/img/favicon/modules/icon-module-releva-retargeting.png',\n    \n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routes: {\n        statistic: {\n            component: 'releva-retargeting-statistic',\n            path: 'statistic'\n        }\n    },\n\n    navigation: [{\n        label: 'releva-retargeting.general.mainMenuItemGeneral',\n        path: 'releva.retargeting.statistic',\n        parent: 'sw-marketing'\n    }]\n\n});\n"],"names":["Mixin","Application","notifications","applicationRoot","title","message","i","notificationKey","data","error","template$2","Component","template","response","iframeUrl","template$1","self","translated","current","disabled","Defaults","State","Criteria","element","snippet","hasScopeMessage","ApiService","RetargetingApiService","httpClient","loginService","apiEndpoint","config","apiRoute","container","initContainer","Module","deDE","enGB"],"mappings":"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"}